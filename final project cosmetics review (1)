{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 101,
      "metadata": {
        "id": "PBKNO3OnDkSC"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from keras.utils import to_categorical\n",
        "from keras import models\n",
        "from keras import layers\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import nltk\n",
        "import re\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "import pickle"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/nyka_top_brands_cosmetics_product_reviews.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rPrdblscFWuY",
        "outputId": "321a646b-fe25-4253-bfdf-57e34a3ada07"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-100-43bddbc1285a>:1: DtypeWarning: Columns (8,9) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  data = pd.read_csv('/content/nyka_top_brands_cosmetics_product_reviews.csv')\n",
            "<ipython-input-102-43bddbc1285a>:1: DtypeWarning: Columns (8,9) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  data = pd.read_csv('/content/nyka_top_brands_cosmetics_product_reviews.csv')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_drop = ['product_id', 'brand_name', 'review_id', 'review_text', 'author', 'review_date', 'is_a_buyer', 'pro_user', 'review_label', 'product_title', 'mrp', 'price', 'product_rating','product_rating_count', 'product_tags', 'product_url']\n",
        "data = data.drop(columns=columns_to_drop)"
      ],
      "metadata": {
        "id": "lpNt1jTMPcnO"
      },
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "p3pFm1P6JI62",
        "outputId": "08dea460-b691-445c-a594-8f1b6314d6a2"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          review_title  review_rating\n",
              "0                 Worth buying 50g one            5.0\n",
              "1           Best cream to start ur day            5.0\n",
              "2  perfect for summers dry for winters            4.0\n",
              "3                    Not a moisturizer            3.0\n",
              "4                              Average            2.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e3777c6e-3949-45fd-819f-5bb7d433e429\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_title</th>\n",
              "      <th>review_rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Worth buying 50g one</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Best cream to start ur day</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>perfect for summers dry for winters</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Not a moisturizer</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Average</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3777c6e-3949-45fd-819f-5bb7d433e429')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e3777c6e-3949-45fd-819f-5bb7d433e429 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e3777c6e-3949-45fd-819f-5bb7d433e429');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def sentiment_label(rating):\n",
        "    if rating in [4, 5]:\n",
        "        return 'Positive'\n",
        "    elif rating == 3:\n",
        "        return 'Neutral'\n",
        "    elif rating in [1, 2]:\n",
        "        return 'Negative'\n",
        "    else:\n",
        "        return 'Unknown'\n",
        "data['Sentiment'] = data['review_rating'].apply(sentiment_label)"
      ],
      "metadata": {
        "id": "0cyigO0DeZmu"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "8qBIozFkKtM3",
        "outputId": "40d28d58-5f2e-42f1-9ab4-45d8b7ab3e28"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       review_rating\n",
              "count   61283.000000\n",
              "mean        4.414781\n",
              "std         1.062547\n",
              "min         1.000000\n",
              "25%         4.000000\n",
              "50%         5.000000\n",
              "75%         5.000000\n",
              "max         5.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9fa1aa00-df40-41a8-901b-753c81ddfb3d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>61283.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4.414781</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.062547</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9fa1aa00-df40-41a8-901b-753c81ddfb3d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9fa1aa00-df40-41a8-901b-753c81ddfb3d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9fa1aa00-df40-41a8-901b-753c81ddfb3d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OgGdLN-ZK_RR",
        "outputId": "7c20f6c8-2475-4c93-8016-ec0c5da8cb1b"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 61285 entries, 0 to 61284\n",
            "Data columns (total 3 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   review_title   61284 non-null  object \n",
            " 1   review_rating  61283 non-null  float64\n",
            " 2   Sentiment      61285 non-null  object \n",
            "dtypes: float64(1), object(2)\n",
            "memory usage: 1.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "label = LabelEncoder()\n",
        "data['Sentiment'] = label.fit_transform(data['Sentiment']) #converting categrical labels into numerical\n"
      ],
      "metadata": {
        "id": "XpTm_M9cLGc3"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "qsffxqU9LuZY",
        "outputId": "ef61aac8-ced0-4428-b51f-8245a9154c97"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          review_title  review_rating  Sentiment\n",
              "0                 Worth buying 50g one            5.0          2\n",
              "1           Best cream to start ur day            5.0          2\n",
              "2  perfect for summers dry for winters            4.0          2\n",
              "3                    Not a moisturizer            3.0          1\n",
              "4                              Average            2.0          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55183402-ea43-4781-9f02-2d62cefc9ab7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_title</th>\n",
              "      <th>review_rating</th>\n",
              "      <th>Sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Worth buying 50g one</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Best cream to start ur day</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>perfect for summers dry for winters</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Not a moisturizer</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Average</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55183402-ea43-4781-9f02-2d62cefc9ab7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-55183402-ea43-4781-9f02-2d62cefc9ab7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-55183402-ea43-4781-9f02-2d62cefc9ab7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = data['review_title']\n",
        "y = data['Sentiment']"
      ],
      "metadata": {
        "id": "OlnU9EatMp15"
      },
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nltk.download('stopwords')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A3PsfXI1UV0f",
        "outputId": "8d81029d-be33-4174-d881-121924a45dd4"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "from nltk.corpus import stopwords"
      ],
      "metadata": {
        "id": "z4kgqBvJUpAM"
      },
      "execution_count": 108,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "stopwords.words('english')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CQ0msJfmUvqZ",
        "outputId": "01b2a616-cf1f-49ff-8c0f-d6feb7fb4d9a"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['i',\n",
              " 'me',\n",
              " 'my',\n",
              " 'myself',\n",
              " 'we',\n",
              " 'our',\n",
              " 'ours',\n",
              " 'ourselves',\n",
              " 'you',\n",
              " \"you're\",\n",
              " \"you've\",\n",
              " \"you'll\",\n",
              " \"you'd\",\n",
              " 'your',\n",
              " 'yours',\n",
              " 'yourself',\n",
              " 'yourselves',\n",
              " 'he',\n",
              " 'him',\n",
              " 'his',\n",
              " 'himself',\n",
              " 'she',\n",
              " \"she's\",\n",
              " 'her',\n",
              " 'hers',\n",
              " 'herself',\n",
              " 'it',\n",
              " \"it's\",\n",
              " 'its',\n",
              " 'itself',\n",
              " 'they',\n",
              " 'them',\n",
              " 'their',\n",
              " 'theirs',\n",
              " 'themselves',\n",
              " 'what',\n",
              " 'which',\n",
              " 'who',\n",
              " 'whom',\n",
              " 'this',\n",
              " 'that',\n",
              " \"that'll\",\n",
              " 'these',\n",
              " 'those',\n",
              " 'am',\n",
              " 'is',\n",
              " 'are',\n",
              " 'was',\n",
              " 'were',\n",
              " 'be',\n",
              " 'been',\n",
              " 'being',\n",
              " 'have',\n",
              " 'has',\n",
              " 'had',\n",
              " 'having',\n",
              " 'do',\n",
              " 'does',\n",
              " 'did',\n",
              " 'doing',\n",
              " 'a',\n",
              " 'an',\n",
              " 'the',\n",
              " 'and',\n",
              " 'but',\n",
              " 'if',\n",
              " 'or',\n",
              " 'because',\n",
              " 'as',\n",
              " 'until',\n",
              " 'while',\n",
              " 'of',\n",
              " 'at',\n",
              " 'by',\n",
              " 'for',\n",
              " 'with',\n",
              " 'about',\n",
              " 'against',\n",
              " 'between',\n",
              " 'into',\n",
              " 'through',\n",
              " 'during',\n",
              " 'before',\n",
              " 'after',\n",
              " 'above',\n",
              " 'below',\n",
              " 'to',\n",
              " 'from',\n",
              " 'up',\n",
              " 'down',\n",
              " 'in',\n",
              " 'out',\n",
              " 'on',\n",
              " 'off',\n",
              " 'over',\n",
              " 'under',\n",
              " 'again',\n",
              " 'further',\n",
              " 'then',\n",
              " 'once',\n",
              " 'here',\n",
              " 'there',\n",
              " 'when',\n",
              " 'where',\n",
              " 'why',\n",
              " 'how',\n",
              " 'all',\n",
              " 'any',\n",
              " 'both',\n",
              " 'each',\n",
              " 'few',\n",
              " 'more',\n",
              " 'most',\n",
              " 'other',\n",
              " 'some',\n",
              " 'such',\n",
              " 'no',\n",
              " 'nor',\n",
              " 'not',\n",
              " 'only',\n",
              " 'own',\n",
              " 'same',\n",
              " 'so',\n",
              " 'than',\n",
              " 'too',\n",
              " 'very',\n",
              " 's',\n",
              " 't',\n",
              " 'can',\n",
              " 'will',\n",
              " 'just',\n",
              " 'don',\n",
              " \"don't\",\n",
              " 'should',\n",
              " \"should've\",\n",
              " 'now',\n",
              " 'd',\n",
              " 'll',\n",
              " 'm',\n",
              " 'o',\n",
              " 're',\n",
              " 've',\n",
              " 'y',\n",
              " 'ain',\n",
              " 'aren',\n",
              " \"aren't\",\n",
              " 'couldn',\n",
              " \"couldn't\",\n",
              " 'didn',\n",
              " \"didn't\",\n",
              " 'doesn',\n",
              " \"doesn't\",\n",
              " 'hadn',\n",
              " \"hadn't\",\n",
              " 'hasn',\n",
              " \"hasn't\",\n",
              " 'haven',\n",
              " \"haven't\",\n",
              " 'isn',\n",
              " \"isn't\",\n",
              " 'ma',\n",
              " 'mightn',\n",
              " \"mightn't\",\n",
              " 'mustn',\n",
              " \"mustn't\",\n",
              " 'needn',\n",
              " \"needn't\",\n",
              " 'shan',\n",
              " \"shan't\",\n",
              " 'shouldn',\n",
              " \"shouldn't\",\n",
              " 'wasn',\n",
              " \"wasn't\",\n",
              " 'weren',\n",
              " \"weren't\",\n",
              " 'won',\n",
              " \"won't\",\n",
              " 'wouldn',\n",
              " \"wouldn't\"]"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "stemmer = PorterStemmer()\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "corpus = []\n",
        "\n",
        "\n",
        "for i in range(len(x)):\n",
        "    review = re.sub(\"[^a-zA-Z]\", \" \", str(x[i]))\n",
        "    review = review.lower()\n",
        "    review = review.split()\n",
        "    review = [stemmer.stem(word) for word in review if word not in stop_words]\n",
        "    review = \" \".join(review)\n",
        "    corpus.append(review)\n"
      ],
      "metadata": {
        "id": "o4MGcuUCAvrp"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "review = re.sub(r'[^\\x00-\\x7F]+', '', str(x[i]))"
      ],
      "metadata": {
        "id": "i1xxms0lDJO6"
      },
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "corpus"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5emswQmHD9ut",
        "outputId": "3a868660-402b-4e15-ab80-d12ec7b8d914"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['worth buy g one',\n",
              " 'best cream start ur day',\n",
              " 'perfect summer dri winter',\n",
              " 'moistur',\n",
              " 'averag',\n",
              " 'good oili skin',\n",
              " 'time favorit',\n",
              " 'good product',\n",
              " 'good eye cream combo',\n",
              " 'olay',\n",
              " 'must tri',\n",
              " 'fabul',\n",
              " 'horribl cream',\n",
              " 'creami',\n",
              " 'olay aha',\n",
              " 'effect item',\n",
              " 'best combo ever',\n",
              " 'simpli superbb',\n",
              " 'worst product ever',\n",
              " 'wow product',\n",
              " 'useless',\n",
              " 'amaz product',\n",
              " 'good',\n",
              " 'ju wow',\n",
              " 'costli',\n",
              " 'visibl chang',\n",
              " 'everi day moistur',\n",
              " 'best one',\n",
              " 'great product',\n",
              " 'best oili skin',\n",
              " 'good mix skin',\n",
              " 'good one',\n",
              " 'good',\n",
              " 'awesom prodect',\n",
              " 'awesom',\n",
              " 'best cream',\n",
              " 'must',\n",
              " 'nice',\n",
              " 'superb',\n",
              " 'give glow skin',\n",
              " 'amaz',\n",
              " '',\n",
              " 'nice',\n",
              " 'gm size wast money',\n",
              " 'olay day night cream',\n",
              " 'best skin treatment',\n",
              " 'good product',\n",
              " 'best cream best combo',\n",
              " 'okay ultim eye cream',\n",
              " 'effect',\n",
              " 'good product',\n",
              " 'bad eye cream',\n",
              " 'chang',\n",
              " 'disgust',\n",
              " 'worst product ever life',\n",
              " 'burn eye use',\n",
              " 'get',\n",
              " 'work',\n",
              " 'worst',\n",
              " 'feel amaz skin',\n",
              " 'disappoint',\n",
              " 'good product',\n",
              " 'bad',\n",
              " 'realli good',\n",
              " 'type consular younger women first choic olay eye cream',\n",
              " 'eye cream',\n",
              " 'nice cream',\n",
              " 'must product',\n",
              " 'fantast product',\n",
              " 'great product',\n",
              " 'amaz product',\n",
              " 'say goodby dark circl',\n",
              " 'absolut love',\n",
              " 'light weight',\n",
              " 'get rid eye problem',\n",
              " 'best treatment dark circl olay',\n",
              " 'olay eye cream best cream',\n",
              " 'amaz',\n",
              " 'remov dark puffi',\n",
              " 'worth penni',\n",
              " 'good',\n",
              " 'olay ultim eye cream',\n",
              " 'great',\n",
              " 'go',\n",
              " 'best product',\n",
              " 'eye cream best',\n",
              " 'good one',\n",
              " 'got allerg reaction',\n",
              " 'awesom',\n",
              " 'worst product',\n",
              " 'bad experi',\n",
              " 'result',\n",
              " 'wast',\n",
              " 'effect',\n",
              " 'olay eye cream',\n",
              " 'noth work worth buy',\n",
              " 'excel',\n",
              " 'underey cream effect',\n",
              " 'work',\n",
              " 'good',\n",
              " 'fine',\n",
              " 'love',\n",
              " 'love olay product',\n",
              " 'excel',\n",
              " 'good one',\n",
              " 'love',\n",
              " 'eye cream',\n",
              " 'nice',\n",
              " 'best eye cream',\n",
              " 'best',\n",
              " 'worthless',\n",
              " 'good eye cream',\n",
              " 'averag product',\n",
              " 'good',\n",
              " 'friend recommend',\n",
              " 'best one',\n",
              " '',\n",
              " 'olay ultim eye cream',\n",
              " 'best eye cream',\n",
              " 'great product',\n",
              " 'moistur',\n",
              " 'love',\n",
              " 'amaz product',\n",
              " 'superb realli work go',\n",
              " 'hydrqt',\n",
              " 'make differ',\n",
              " 'effect cream',\n",
              " 'best best best',\n",
              " 'realli work',\n",
              " 'reduc puffi',\n",
              " 'best cream',\n",
              " 'amaz',\n",
              " 'dark circl go within day',\n",
              " 'best',\n",
              " 'ultim eye cream',\n",
              " 'wow eye',\n",
              " 'say',\n",
              " 'best eye cream',\n",
              " 'wonder',\n",
              " 'mindblow',\n",
              " 'good',\n",
              " 'wow',\n",
              " 'thank nykaa',\n",
              " 'effect cream',\n",
              " 'good',\n",
              " 'nice',\n",
              " 'effect',\n",
              " '',\n",
              " 'amaz rang',\n",
              " 'good',\n",
              " 'visibl reduct dark circl',\n",
              " 'amaz',\n",
              " 'definit work',\n",
              " 'mattifi eye cream',\n",
              " 'olay eye cream',\n",
              " 'eye screem',\n",
              " 'repurchas',\n",
              " 'okay eye cream',\n",
              " 'creami finsh',\n",
              " 'love product',\n",
              " 'good result',\n",
              " 'excel eye cream',\n",
              " 'eye cream',\n",
              " 'afford effect product',\n",
              " 'good product',\n",
              " 'work like conceal',\n",
              " 'big',\n",
              " 'good',\n",
              " 'okay job brighten eye skin',\n",
              " 'result',\n",
              " 'hydrat',\n",
              " 'work',\n",
              " 'alright',\n",
              " 'good',\n",
              " 'noth',\n",
              " 'nice eye cream',\n",
              " 'work stubborn dark circl',\n",
              " 'good',\n",
              " 'wast money',\n",
              " 'much differ except puffi',\n",
              " 'dri flaki',\n",
              " 'use conceal',\n",
              " 'good',\n",
              " 'okay',\n",
              " 'hydrat',\n",
              " 'food eye',\n",
              " 'tlc skin',\n",
              " 'recommend',\n",
              " 'realli good product mom use',\n",
              " 'amaz eye product',\n",
              " 'good product',\n",
              " 'best',\n",
              " 'nice eye cream',\n",
              " 'good',\n",
              " 'say',\n",
              " 'second purchas',\n",
              " 'nice',\n",
              " 'bright eye realiti',\n",
              " 'good product',\n",
              " 'effect',\n",
              " 'help dark circl',\n",
              " 'good go',\n",
              " 'like creami part',\n",
              " 'must buy',\n",
              " 'great',\n",
              " 'olay ultim eye cream',\n",
              " 'okayish',\n",
              " 'good product',\n",
              " 'nice product',\n",
              " 'worth',\n",
              " 'nice one',\n",
              " 'bad reaction eye lid',\n",
              " 'good product',\n",
              " 'nice',\n",
              " 'must buy',\n",
              " 'best eye cream',\n",
              " 'good',\n",
              " 'wow improv eye area',\n",
              " 'effect product ad skincar routin',\n",
              " 'quit good eye cream',\n",
              " 'best eye cream wrinkl',\n",
              " 'awesom dark circl',\n",
              " 'must buy',\n",
              " 'ultim ever',\n",
              " 'good',\n",
              " 'good one',\n",
              " 'good product',\n",
              " 'best',\n",
              " 'nice product',\n",
              " 'effect',\n",
              " 'averag result',\n",
              " 'okayish',\n",
              " 'okay product',\n",
              " 'nice product expens',\n",
              " 'expens product',\n",
              " 'great product',\n",
              " 'differ',\n",
              " 'must buy',\n",
              " 'good cream',\n",
              " 'happi birthday',\n",
              " 'good eye cream',\n",
              " 'nice',\n",
              " 'beauti product',\n",
              " 'benefici',\n",
              " 'effect',\n",
              " 'best eye cream',\n",
              " 'magic buy',\n",
              " 'nice product',\n",
              " 'like',\n",
              " 'ok',\n",
              " 'excel',\n",
              " 'best cream',\n",
              " 'good',\n",
              " 'fulli satisfi',\n",
              " 'great',\n",
              " 'nice',\n",
              " 'eye',\n",
              " 'work well',\n",
              " 'use',\n",
              " 'work',\n",
              " 'good',\n",
              " 'good',\n",
              " 'good product',\n",
              " 'effect',\n",
              " 'useless',\n",
              " 'contain paraben',\n",
              " 'work',\n",
              " 'work',\n",
              " 'worth',\n",
              " 'nice',\n",
              " 'excel product',\n",
              " 'worst',\n",
              " 'good fair skin',\n",
              " 'worth',\n",
              " 'bad',\n",
              " 'disappoint',\n",
              " 'feel awesom',\n",
              " 'absolut noth',\n",
              " 'make skin look cakey dark',\n",
              " 'comfort use',\n",
              " 'olay best',\n",
              " 'awesom',\n",
              " 'fine',\n",
              " 'love',\n",
              " 'best cream',\n",
              " 'nice use',\n",
              " 'love',\n",
              " 'best bb',\n",
              " 'amaz',\n",
              " 'love',\n",
              " 'suitabl skin type',\n",
              " 'awesom skin textur',\n",
              " 'nice product',\n",
              " 'sensit skin bad product',\n",
              " 'bad',\n",
              " 'wast money',\n",
              " 'worst product olay',\n",
              " 'good product',\n",
              " 'great product',\n",
              " 'good product',\n",
              " 'decent tri',\n",
              " 'textur good',\n",
              " 'alright',\n",
              " 'worth hype',\n",
              " 'expect',\n",
              " 'blend nice may suitabl skin type',\n",
              " 'buy',\n",
              " 'dull look',\n",
              " 'oili skin',\n",
              " 'oili skin',\n",
              " 'give breakout sensit skin',\n",
              " 'olay bb cream',\n",
              " 'work good skin',\n",
              " 'everi skin',\n",
              " 'high expect',\n",
              " 'oxidis',\n",
              " 'worth',\n",
              " 'greasi dark',\n",
              " 'one',\n",
              " 'make',\n",
              " 'satisfi',\n",
              " 'nice',\n",
              " 'sheer olay cream',\n",
              " 'sheer',\n",
              " 'olay',\n",
              " 'duski skin',\n",
              " 'paraben free',\n",
              " 'worst bb cream',\n",
              " 'worth',\n",
              " 'big noo',\n",
              " 'worth',\n",
              " 'amaz result',\n",
              " 'great product',\n",
              " 'say',\n",
              " 'superb daili routin',\n",
              " 'olay bb cream',\n",
              " 'best product ever',\n",
              " 'good moisturis',\n",
              " 'great product',\n",
              " 'awesom',\n",
              " 'olay total effect',\n",
              " 'best best',\n",
              " 'amaz',\n",
              " 'nice',\n",
              " 'olay total effect',\n",
              " 'cream',\n",
              " 'packag good',\n",
              " 'good',\n",
              " 'nice',\n",
              " 'great',\n",
              " 'good',\n",
              " 'good',\n",
              " 'good cream like',\n",
              " 'awesom',\n",
              " 'nice',\n",
              " 'nice',\n",
              " 'nice one',\n",
              " 'age miracl realli work miracl',\n",
              " 'love work mother',\n",
              " 'time favourit',\n",
              " 'nice',\n",
              " 'regular user',\n",
              " 'good product',\n",
              " 'amaz',\n",
              " 'olay best',\n",
              " 'amaz product',\n",
              " 'mom favourit',\n",
              " 'nice product',\n",
              " 'best moistur face cream',\n",
              " 'miracl',\n",
              " 'look like make',\n",
              " 'face cream',\n",
              " 'best blend bb cream',\n",
              " 'love',\n",
              " 'good one',\n",
              " 'great skin',\n",
              " 'nice product',\n",
              " 'good',\n",
              " 'light coverag everyday use',\n",
              " 'good product',\n",
              " 'excel',\n",
              " 'nice one',\n",
              " 'foundat base best',\n",
              " 'regular user',\n",
              " 'awesom product beginn',\n",
              " 'use product',\n",
              " 'good',\n",
              " 'great product',\n",
              " 'love experi',\n",
              " 'good product',\n",
              " 'high expect',\n",
              " 'great product',\n",
              " 'good',\n",
              " 'age bar',\n",
              " 'good compact',\n",
              " 'effect smooth finish',\n",
              " 'olay',\n",
              " 'say',\n",
              " 'give soft smooth skin even skin tone',\n",
              " 'got',\n",
              " 'work like magic',\n",
              " 'nykaa spot patch',\n",
              " 'spot patch',\n",
              " 'spot patch',\n",
              " 'nice product acn',\n",
              " 'good',\n",
              " 'good',\n",
              " 'work well',\n",
              " 'good product',\n",
              " 'patch',\n",
              " 'give star easili find review',\n",
              " 'nice',\n",
              " 'best pimpl patch ever',\n",
              " 'wonder product',\n",
              " 'work fine',\n",
              " 'good one',\n",
              " 'work',\n",
              " 'okok',\n",
              " 'good one',\n",
              " 'work',\n",
              " 'spot patch',\n",
              " 'spot patch',\n",
              " 'magic',\n",
              " 'spot patch',\n",
              " 'patch',\n",
              " 'invis smooth',\n",
              " 'decent product',\n",
              " 'love',\n",
              " 'good product',\n",
              " 'nykka spot patch',\n",
              " 'work magic',\n",
              " 'super fast deliveri',\n",
              " 'spot patch',\n",
              " 'omg',\n",
              " 'awesom',\n",
              " 'first time',\n",
              " 'acn spot patch',\n",
              " 'nykaa',\n",
              " 'must buy',\n",
              " 'work wonder',\n",
              " 'small size',\n",
              " 'good product',\n",
              " 'good',\n",
              " 'nice',\n",
              " 'addict',\n",
              " 'good',\n",
              " 'effect',\n",
              " 'perfect spot',\n",
              " 'clear pimpl overnight',\n",
              " 'work',\n",
              " 'effect',\n",
              " 'good peopl bad pimpl',\n",
              " 'useful',\n",
              " 'actual work',\n",
              " 'nice',\n",
              " 'life save',\n",
              " 'wonder',\n",
              " 'work well',\n",
              " 'cool',\n",
              " 'good product',\n",
              " 'ggod',\n",
              " 'good',\n",
              " 'speed heal process',\n",
              " 'spot patch',\n",
              " 'great product',\n",
              " 'first time purchas',\n",
              " 'good product',\n",
              " 'good one',\n",
              " 'love',\n",
              " 'work thank nykaa',\n",
              " 'work',\n",
              " 'amaz',\n",
              " 'magic',\n",
              " 'good',\n",
              " 'good product',\n",
              " 'pocket friendli spot patch',\n",
              " 'acn patch',\n",
              " 'best',\n",
              " 'spot patch acn',\n",
              " 'spot patch',\n",
              " 'work',\n",
              " 'pimpel patch',\n",
              " 'effect spot corrector',\n",
              " 'spot patch',\n",
              " 'pimpl partner',\n",
              " 'cute',\n",
              " 'work',\n",
              " 'best',\n",
              " 'nice product',\n",
              " 'nice',\n",
              " 'spot patch',\n",
              " 'hide pimpl',\n",
              " 'absolut worth',\n",
              " 'love',\n",
              " 'nykaa skin secret tea tree salicyl acid spot patch',\n",
              " 'love',\n",
              " 'holi grail',\n",
              " 'spot patch',\n",
              " 'best',\n",
              " 'work',\n",
              " 'steal',\n",
              " 'best one',\n",
              " 'amaz',\n",
              " 'look promis',\n",
              " 'good product',\n",
              " 'perfect solut acn prone skin',\n",
              " 'realli help',\n",
              " 'excel',\n",
              " 'afford n excel product',\n",
              " 'oili skin',\n",
              " 'pimpl patch',\n",
              " 'provid cool effect',\n",
              " 'best',\n",
              " 'good',\n",
              " 'spot patch',\n",
              " 'spot patch',\n",
              " 'nykaa spot patch',\n",
              " 'great product',\n",
              " 'yeah realli work',\n",
              " 'afford yet effect',\n",
              " 'nice',\n",
              " 'nykaa skin secret spot patch',\n",
              " '',\n",
              " 'nice',\n",
              " 'worth',\n",
              " 'amaz',\n",
              " 'love',\n",
              " 'amaz product',\n",
              " 'magic',\n",
              " 'spot patch',\n",
              " 'must buy product',\n",
              " 'spot patch',\n",
              " 'great product love',\n",
              " 'work like charm',\n",
              " 'nice',\n",
              " 'must product',\n",
              " 'good',\n",
              " 'worksss',\n",
              " 'work',\n",
              " 'good',\n",
              " 'great',\n",
              " 'satisfi',\n",
              " 'wow',\n",
              " 'work',\n",
              " 'amaz',\n",
              " 'spot patch',\n",
              " 'like',\n",
              " 'work',\n",
              " 'great buy',\n",
              " 'spot',\n",
              " 'good product',\n",
              " 'life saver',\n",
              " 'pretti much good',\n",
              " 'bless acn prone',\n",
              " 'think work',\n",
              " 'work pimpl whitehead',\n",
              " 'omg wrok like magic',\n",
              " 'condition',\n",
              " 'work well',\n",
              " 'life saviour',\n",
              " 'stick pimpl',\n",
              " 'amaz',\n",
              " 'amaz',\n",
              " 'love',\n",
              " 'good product',\n",
              " 'spot gone',\n",
              " 'work',\n",
              " 'omfg',\n",
              " 'acn spot patch',\n",
              " 'must skin care kit',\n",
              " 'patch',\n",
              " 'superb',\n",
              " 'love',\n",
              " 'effect',\n",
              " 'nice',\n",
              " 'cute',\n",
              " 'nice',\n",
              " 'spot',\n",
              " 'help',\n",
              " 'good',\n",
              " 'must buy',\n",
              " 'effect',\n",
              " 'good',\n",
              " 'work overnight',\n",
              " 'amaz product nykaa',\n",
              " 'tea tree great acn',\n",
              " 'good product',\n",
              " 'rd purchas',\n",
              " 'nykaa',\n",
              " 'awesom',\n",
              " 'wow',\n",
              " 'work amazingli',\n",
              " 'okay okay product',\n",
              " 'tini',\n",
              " 'work like magic',\n",
              " 'awesom',\n",
              " 'work wonder',\n",
              " 'great',\n",
              " 'good',\n",
              " 'best',\n",
              " 'wowwwwwwwww',\n",
              " 'realli good',\n",
              " 'best purchas',\n",
              " 'good',\n",
              " 'definit work',\n",
              " 'good',\n",
              " 'spot patch',\n",
              " 'work',\n",
              " 'keep handi',\n",
              " 'unbeliev result',\n",
              " 'flatten pimpl',\n",
              " 'okk okk',\n",
              " 'nice',\n",
              " 'must tri',\n",
              " 'excel',\n",
              " 'great',\n",
              " 'good spot pach',\n",
              " 'effect pimpl',\n",
              " 'work well',\n",
              " 'actual work',\n",
              " 'work wonder',\n",
              " 'help activ pimpl',\n",
              " 'nice product',\n",
              " 'good product',\n",
              " 'love',\n",
              " 'great product',\n",
              " 'work',\n",
              " 'bakwa instead wast money buy',\n",
              " 'perfect cover bump',\n",
              " 'almost invis',\n",
              " 'best acn',\n",
              " 'nykaa skin spot patch',\n",
              " 'good',\n",
              " 'excel acn settler',\n",
              " 'spot patch',\n",
              " 'remov reduc pimpl day',\n",
              " 'best afford patch',\n",
              " 'must buy',\n",
              " 'best activ pimpl',\n",
              " 'magic inde',\n",
              " 'good product',\n",
              " 'saviour',\n",
              " 'bomb product',\n",
              " 'nykaa acn patch',\n",
              " 'good',\n",
              " 'work well',\n",
              " 'good product',\n",
              " 'great product',\n",
              " 'awsm product',\n",
              " 'easi fix',\n",
              " 'worksss',\n",
              " 'help spread anymor acn due sweat',\n",
              " 'patch',\n",
              " 'baddddd',\n",
              " 'worth',\n",
              " 'help lot',\n",
              " 'realli good',\n",
              " 'go',\n",
              " 'work well',\n",
              " 'effect',\n",
              " 'real nice',\n",
              " 'effect one',\n",
              " 'see much differ',\n",
              " 'nykaa skin secret tea tree salicyl acid spot patch',\n",
              " 'work wonder',\n",
              " 'nykaa elixir',\n",
              " 'worth',\n",
              " 'impress',\n",
              " 'give tri',\n",
              " 'pimpl patch',\n",
              " 'decent product',\n",
              " 'work',\n",
              " 'love product',\n",
              " 'magic',\n",
              " 'holi grail',\n",
              " 'saviour',\n",
              " 'realli work',\n",
              " 'work well',\n",
              " 'amaz',\n",
              " 'definit job',\n",
              " 'amaz',\n",
              " 'best',\n",
              " 'good',\n",
              " 'magic',\n",
              " 'easi use',\n",
              " 'patch',\n",
              " 'love spot patch',\n",
              " 'saviour',\n",
              " 'shittest thing ever buy',\n",
              " 'effect',\n",
              " 'work',\n",
              " 'best patch quick night fix',\n",
              " 'amaz',\n",
              " 'worth',\n",
              " 'effect fast',\n",
              " 'work',\n",
              " 'nice',\n",
              " 'bye bye puss achn',\n",
              " 'mind blow',\n",
              " 'tri',\n",
              " 'awesom afford',\n",
              " 'love love',\n",
              " 'acn remov patch',\n",
              " 'nice',\n",
              " 'good',\n",
              " 'pimpl gone',\n",
              " 'realli work',\n",
              " 'thank nykaa',\n",
              " 'work well',\n",
              " 'nykaa skin',\n",
              " 'work',\n",
              " 'work expect',\n",
              " 'ok ok product',\n",
              " 'second purchas',\n",
              " 'work',\n",
              " 'superb product',\n",
              " 'realli work magic',\n",
              " 'fast act',\n",
              " 'spot patch',\n",
              " 'good',\n",
              " 'work wonder',\n",
              " 'work like magic',\n",
              " 'good result',\n",
              " 'worthi',\n",
              " 'pimpl patch',\n",
              " 'good',\n",
              " 'live saver',\n",
              " 'best',\n",
              " 'gud product',\n",
              " 'awesom',\n",
              " 'work',\n",
              " 'recommend product',\n",
              " 'work pimpl',\n",
              " 'love',\n",
              " 'first timer',\n",
              " 'realli like patch',\n",
              " 'justifi name',\n",
              " 'spot treatment',\n",
              " 'effect',\n",
              " 'worst',\n",
              " 'solut pimpl',\n",
              " 'ok',\n",
              " 'work',\n",
              " 'know pimpl',\n",
              " 'work well',\n",
              " 'good clear pimpl without leav spot',\n",
              " 'gud product',\n",
              " 'good product',\n",
              " 'nice',\n",
              " 'good',\n",
              " 'love patch',\n",
              " 'nice product',\n",
              " 'worth',\n",
              " 'work puss acn',\n",
              " 'decent product',\n",
              " 'good',\n",
              " 'decent',\n",
              " 'miracl product work',\n",
              " 'work great',\n",
              " 'work well',\n",
              " 'good product',\n",
              " 'good product',\n",
              " 'good skin',\n",
              " 'good',\n",
              " 'good',\n",
              " 'nykaa skin patch love',\n",
              " 'okay',\n",
              " 'actual work',\n",
              " 'workk',\n",
              " 'help product',\n",
              " 'pretti conveni',\n",
              " 'wow',\n",
              " 'use yet',\n",
              " 'awesom',\n",
              " 'cute',\n",
              " 'work',\n",
              " 'good',\n",
              " 'good',\n",
              " 'excit tri',\n",
              " 'acn prone skin must have',\n",
              " 'pimpl patch',\n",
              " 'effect pimpl patch',\n",
              " 'dicey',\n",
              " 'patch',\n",
              " 'small size',\n",
              " 'nykaa spot patch',\n",
              " 'acn patch',\n",
              " 'use',\n",
              " 'good small pimpl',\n",
              " 'nice',\n",
              " 'work good',\n",
              " 'good one',\n",
              " 'spot patch',\n",
              " 'good product',\n",
              " 'worth',\n",
              " 'good',\n",
              " 'nice',\n",
              " 'bit expens price',\n",
              " 'saviour',\n",
              " 'great product',\n",
              " 'great product',\n",
              " 'work pu acn',\n",
              " 'tea tree salicyl acid spot patch',\n",
              " 'okayish',\n",
              " 'good acn patch',\n",
              " 'good quick fix',\n",
              " 'superb product',\n",
              " 'amaz littl troubl stick oili skin',\n",
              " 'good',\n",
              " 'miracl product',\n",
              " 'good go outsid',\n",
              " 'nice product',\n",
              " 'effect',\n",
              " 'nice',\n",
              " 'hide blemish',\n",
              " 'okay',\n",
              " 'good',\n",
              " 'work pusey pimpl',\n",
              " 'quick fix',\n",
              " 'okay ish product',\n",
              " 'job',\n",
              " 'realli good',\n",
              " 'good',\n",
              " 'buy work acn',\n",
              " 'actual work',\n",
              " 'reduc red',\n",
              " 'work take time',\n",
              " 'bad',\n",
              " 'work',\n",
              " 'okay',\n",
              " 'good product',\n",
              " 'refuc inflamm',\n",
              " 'nice',\n",
              " 'must buy',\n",
              " 'good pimpl patch',\n",
              " 'serv purpos',\n",
              " 'work good',\n",
              " 'effect',\n",
              " 'okayishh',\n",
              " 'acn patch',\n",
              " 'good product',\n",
              " 'great product',\n",
              " 'work',\n",
              " 'good',\n",
              " 'love',\n",
              " 'good',\n",
              " 'easi use',\n",
              " 'spot patch',\n",
              " 'invis patch',\n",
              " 'good',\n",
              " 'pimpl patch',\n",
              " 'nykaa spot patch',\n",
              " 'pleasantli surpris',\n",
              " 'ok ok',\n",
              " 'realli work',\n",
              " 'love',\n",
              " 'nyka patch',\n",
              " 'love',\n",
              " 'pimpl',\n",
              " 'patch nykaa',\n",
              " 'work okay',\n",
              " 'patch',\n",
              " 'good acn',\n",
              " 'nice one',\n",
              " 'work great',\n",
              " 'nykaa patch',\n",
              " 'wow',\n",
              " 'good stuff',\n",
              " 'nykaa skin spot patch',\n",
              " 'ok',\n",
              " 'realli work',\n",
              " 'realli work',\n",
              " 'good product',\n",
              " 'effect',\n",
              " 'first buy',\n",
              " 'definit buy',\n",
              " 'amaz',\n",
              " 'best friend oili acn prone skin ppl',\n",
              " 'good product',\n",
              " '',\n",
              " 'patch n wipe',\n",
              " 'control acn',\n",
              " 'better extract',\n",
              " 'love',\n",
              " 'work like magic',\n",
              " 'work well',\n",
              " 'must',\n",
              " 'love',\n",
              " 'savior',\n",
              " 'saviour',\n",
              " 'handi',\n",
              " 'nyc',\n",
              " 'magic',\n",
              " 'super use',\n",
              " 'nice',\n",
              " 'definit saw acn dri',\n",
              " 'love',\n",
              " 'work',\n",
              " 'bad experi',\n",
              " 'recommend',\n",
              " 'nykaa spot patch',\n",
              " 'nice',\n",
              " 'okay type',\n",
              " 'super effect',\n",
              " 'wow actual work',\n",
              " 'good',\n",
              " 'wow',\n",
              " 'nykaa patch',\n",
              " 'say',\n",
              " 'good',\n",
              " 'effect',\n",
              " 'good one',\n",
              " 'worth tri',\n",
              " 'review',\n",
              " 'ok ok product',\n",
              " 'must',\n",
              " 'spot patch',\n",
              " 'worth buy',\n",
              " 'nice',\n",
              " 'love',\n",
              " 'good',\n",
              " 'good product',\n",
              " 'go',\n",
              " 'nykaa pimpl patch',\n",
              " 'good',\n",
              " 'spot patch',\n",
              " 'wast',\n",
              " 'nykaa skin secret tea tree salicyl acid spot patch',\n",
              " 'bomb product',\n",
              " 'realli work',\n",
              " 'expens',\n",
              " 'good',\n",
              " 'okok',\n",
              " 'nice',\n",
              " 'good',\n",
              " 'good',\n",
              " 'control oil product',\n",
              " 'realli good',\n",
              " 'good sensit oili acn prone skin',\n",
              " 'saviour',\n",
              " 'okayish',\n",
              " 'holi grail',\n",
              " 'realli nice',\n",
              " 'good',\n",
              " 'total worth buy',\n",
              " 'must buy',\n",
              " 'amaz',\n",
              " 'nykaa spot patch',\n",
              " 'work',\n",
              " 'best',\n",
              " 'amaz product',\n",
              " 'worth',\n",
              " 'result',\n",
              " 'work',\n",
              " 'spot patch',\n",
              " 'acn patch',\n",
              " 'transpar',\n",
              " 'wow',\n",
              " 'magic patch work decent',\n",
              " 'must',\n",
              " 'use experi',\n",
              " 'good',\n",
              " 'small yet cute',\n",
              " 'magic',\n",
              " 'good job',\n",
              " 'work like magic woww',\n",
              " 'pain relief',\n",
              " 'work except well',\n",
              " 'mix review',\n",
              " 'fairli okay',\n",
              " 'spot patch',\n",
              " 'ok product',\n",
              " 'good overcom pimpl day',\n",
              " 'elimin pimpl help avoid becom wors',\n",
              " 'gud bad',\n",
              " 'big fan',\n",
              " 'okay',\n",
              " 'partial use',\n",
              " 'honest review',\n",
              " 'pain relief acn',\n",
              " 'sure help',\n",
              " 'acn spot patch',\n",
              " 'fair',\n",
              " 'good product',\n",
              " 'upto mark',\n",
              " 'okayish',\n",
              " 'job fairli',\n",
              " 'visibl result',\n",
              " 'okayish',\n",
              " 'decent product',\n",
              " 'averag',\n",
              " 'work time',\n",
              " 'effect',\n",
              " 'okayish',\n",
              " 'good product',\n",
              " 'ok product',\n",
              " 'okay type',\n",
              " 'ok',\n",
              " 'littl',\n",
              " 'help pimpl',\n",
              " ...]"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "cv = TfidfVectorizer(max_features=5000)\n",
        "X = cv.fit_transform(corpus).toarray()"
      ],
      "metadata": {
        "id": "jh5lnlb_EKYD"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s5GzGK_TkUWJ",
        "outputId": "bdeb3c57-e74c-4713-a5ea-419ebb556401"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(61285, 4383)"
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.2, random_state = 101)"
      ],
      "metadata": {
        "id": "_sT41ZSMFRor"
      },
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oJdp1SRwl2Iu",
        "outputId": "35d3f2f7-193f-49fb-8cc0-7bab24a9cee6"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(61285,)"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "nltk.download('punkt')\n",
        "from collections import Counter\n",
        "from nltk.tokenize import word_tokenize\n",
        "\n",
        "tokenized_texts = [word_tokenize(text) for text in corpus]\n",
        "\n",
        "\n",
        "word_counts = Counter(word for text in tokenized_texts for word in text)\n",
        "\n",
        "min_frequency = 5  # Minimum number of occurrences for a word to be considered relevant\n",
        "max_frequency = 1000  # Maximum number of occurrences for a word to be considered relevant\n",
        "\n",
        "filtered_words = [word for word, count in word_counts.items() if min_frequency <= count <= max_frequency]\n",
        "\n",
        "print(filtered_words)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e0UMT4Jt7H7K",
        "outputId": "5becfd24-d8a7-4b73-deb8-e20517e1ee98"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['worth', 'g', 'cream', 'start', 'ur', 'day', 'summer', 'dri', 'winter', 'moistur', 'averag', 'oili', 'skin', 'time', 'favorit', 'eye', 'combo', 'olay', 'must', 'tri', 'fabul', 'horribl', 'creami', 'effect', 'ever', 'simpli', 'superbb', 'worst', 'wow', 'useless', 'ju', 'costli', 'visibl', 'chang', 'everi', 'mix', 'superb', 'give', 'glow', 'size', 'wast', 'money', 'night', 'treatment', 'okay', 'ultim', 'bad', 'disgust', 'life', 'burn', 'use', 'get', 'work', 'feel', 'disappoint', 'realli', 'type', 'first', 'choic', 'fantast', 'say', 'dark', 'circl', 'absolut', 'light', 'weight', 'problem', 'remov', 'puffi', 'penni', 'go', 'got', 'reaction', 'experi', 'result', 'noth', 'excel', 'fine', 'worthless', 'friend', 'recommend', 'make', 'differ', 'reduc', 'within', 'wonder', 'thank', 'nykaa', 'rang', 'definit', 'mattifi', 'repurchas', 'afford', 'like', 'conceal', 'big', 'job', 'brighten', 'hydrat', 'alright', 'much', 'except', 'flaki', 'mom', 'second', 'purchas', 'bright', 'help', 'okayish', 'improv', 'routin', 'quit', 'expens', 'happi', 'birthday', 'magic', 'ok', 'fulli', 'satisfi', 'well', 'contain', 'paraben', 'fair', 'look', 'cakey', 'comfort', 'bb', 'suitabl', 'textur', 'sensit', 'decent', 'hype', 'expect', 'blend', 'may', 'dull', 'breakout', 'high', 'oxidis', 'greasi', 'sheer', 'duski', 'free', 'daili', 'moisturis', 'total', 'packag', 'age', 'miracl', 'favourit', 'regular', 'user', 'face', 'coverag', 'everyday', 'foundat', 'base', 'beginn', 'compact', 'smooth', 'finish', 'soft', 'even', 'tone', 'spot', 'patch', 'acn', 'star', 'easili', 'find', 'review', 'pimpl', 'okok', 'invis', 'nykka', 'super', 'fast', 'deliveri', 'omg', 'small', 'addict', 'clear', 'peopl', 'actual', 'cool', 'pocket', 'friendli', 'corrector', 'partner', 'cute', 'hide', 'secret', 'tea', 'tree', 'salicyl', 'acid', 'holi', 'grail', 'steal', 'promis', 'solut', 'prone', 'n', 'provid', 'yeah', 'yet', 'charm', 'saver', 'pretti', 'bless', 'think', 'condition', 'saviour', 'stick', 'care', 'kit', 'rd', 'amazingli', 'tini', 'keep', 'handi', 'unbeliev', 'okk', 'cover', 'almost', 'inde', 'bomb', 'awsm', 'easi', 'fix', 'spread', 'sweat', 'lot', 'real', 'see', 'impress', 'thing', 'quick', 'bye', 'mind', 'blow', 'worthi', 'live', 'gud', 'timer', 'name', 'know', 'without', 'leav', 'conveni', 'excit', 'bit', 'price', 'littl', 'ish', 'red', 'take', 'serv', 'purpos', 'pleasantli', 'surpris', 'nyka', 'stuff', 'control', 'better', 'savior', 'nyc', 'oil', 'woww', 'fairli', 'avoid', 'becom', 'wors', 'fan', 'partial', 'honest', 'sure', 'upto', 'mark', 'appli', 'perman', 'kind', 'moder', 'kinda', 'qualiti', 'huge', 'thin', 'doesnt', 'mini', 'meet', 'extraordinari', 'ordinari', 'claim', 'shock', 'medium', 'okish', 'compar', 'pop', 'issu', 'rough', 'mask', 'design', 'comfi', 'never', 'fashion', 'materi', 'poor', 'fit', 'aw', 'way', 'cheap', 'pleas', 'terribl', 'larg', 'could', 'layer', 'extrem', 'overpr', 'yay', 'pathet', 'loos', 'w', 'shape', 'al', 'protect', 'awsom', 'right', 'twice', 'u', 'enough', 'appl', 'cider', 'vinegar', 'dandruff', 'everyon', 'also', 'soo', 'less', 'hairfal', 'hair', 'shampoo', 'charcoal', 'bamboo', 'water', 'short', 'smell', 'quantiti', 'natur', 'gd', 'scalp', 'prevent', 'anti', 'highli', 'wowww', 'gift', 'pigment', 'de', 'tan', 'wash', 'clean', 'fresh', 'pack', 'set', 'valu', 'heavenli', 'radiant', 'lotion', 'wao', 'anyth', 'thick', 'stone', 'luxuri', 'complet', 'cleanser', 'tool', 'budget', 'extra', 'hard', 'blue', 'far', 'overal', 'oki', 'stop', 'cleans', 'deep', 'brush', 'incred', 'green', 'touch', 'pink', 'rate', 'wise', 'blink', 'skip', 'need', 'option', 'frizzi', 'satisfactori', 'vaniti', 'box', 'rosi', 'dream', 'spaciou', 'color', 'fanci', 'heavi', 'makeup', 'tame', 'blush', 'singl', 'ladi', 'lipstick', 'ml', 'lippi', 'matt', 'last', 'metal', 'liquid', 'eyeshadow', 'firework', 'l', 'umbrella', 'shimmer', 'long', 'non', 'highlight', 'sheen', 'shine', 'lipgloss', 'pricey', 'poker', 'transfer', 'proof', 'shimmeri', 'bronz', 'bt', 'lip', 'classi', 'dazzl', 'sale', 'skyfal', 'next', 'shini', 'nayka', 'sky', 'fall', 'fire', 'waterproof', 'glossi', 'read', 'fav', 'travel', 'luv', 'blendabl', 'lightweight', 'subtl', 'true', 'stun', 'prettiest', 'dissatisfi', 'dont', 'show', 'guy', 'meh', 'liter', 'crazi', 'wowwww', 'peach', 'sweet', 'unhappi', 'amez', 'brown', 'b', 'champagn', 'glitter', 'vibe', 'oh', 'amazinggggg', 'patchi', 'purpl', 'copper', 'bottl', 'glitteri', 'naykaa', 'longlast', 'profession', 'tooo', 'version', 'offer', 'parti', 'thankyou', 'gloss', 'satin', 'v', 'vibrant', 'shadow', 'multi', 'stay', 'sparkl', 'ye', 'discount', 'power', 'fragranc', 'spici', 'fruiti', 'vanilla', 'point', 'perfum', 'uniqu', 'usual', 'ador', 'pictur', 'trustworthi', 'pouch', 'madra', 'kaapi', 'normal', 'janhvi', 'bomba', 'chai', 'maybellin', 'goe', 'formula', 'rich', 'nude', 'pinki', 'gul', 'rukmini', 'mishti', 'girl', 'sooooo', 'mauv', 'boho', 'maharani', 'brownish', 'bought', 'nd', 'pure', 'le', 'kashi', 'alway', 'pinkish', 'browni', 'skinton', 'maithili', 'lipstic', 'duper', 'wheatish', 'brilliant', 'underton', 'peachi', 'stapl', 'forev', 'pay', 'wear', 'basic', 'current', 'increas', 'bestest', 'wowwwww', 'fab', 'soul', 'gon', 'na', 'grab', 'osm', 'suggest', 'order', 'awasom', 'warm', 'want', 'coral', 'indian', 'suit', 'lover', 'vri', 'tint', 'eleg', 'lovee', 'gorgeou', 'choos', 'smaller', 'preeti', 'sexi', 'cutest', 'smart', 'essenc', 'damn', 'loveee', 'nail', 'unsatisfactori', 'paint', 'enamel', 'properli', 'polish', 'nailpaint', 'would', 'zero', 'nourish', 'dual', 'damag', 'come', 'fun', 'interest', 'instantli', 'opinion', 'effici', 'fake', 'strong', 'reason', 'fail', 'difficult', 'bare', 'nailpolish', 'wastag', 'proper', 'pl', 'thumb', 'gold', 'unexpect', 'gave', 'bestttt', 'meant', 'beautiful', 'attract', 'market', 'avail', 'cost', 'swipe', 'someth', 'sooo', 'obsess', 'perfectli', 'full', 'lil', 'servic', 'fantabul', 'space', 'liner', 'wing', 'eyelin', 'pen', 'month', 'stamp', 'side', 'applic', 'smudg', 'nt', 'wink', 'ink', 'hate', 'receiv', 'low', 'line', 'knight', 'till', 'made', 'thought', 'hour', 'prici', 'truli', 'sharp', 'tip', 'black', 'quickli', 'hack', 'payoff', 'boon', 'probabl', 'launch', 'glamor', 'peasi', 'wait', 'final', 'darkest', 'jet', 'sketch', 'bold', 'wick', 'game', 'changer', 'found', 'soooo', 'grt', 'simpl', 'kiss', 'kajal', 'amazinggg', 'stroke', 'word', 'formul', 'sober', 'hd', 'surprisingli', 'cant', 'everyth', 'shinni', 'essenti', 'festiv', 'dramat', 'rose', 'collect', 'heaven', 'sparkli', 'refresh', 'balm', 'new', 'sticki', 'overr', 'clr', 'ott', 'drama', 'deal', 'lash', 'eyelash', 'turn', 'fals', 'occas', 'volumin', 'falsi', 'beyond', 'owsm', 'melodrama', 'length', 'volum', 'talk', 'major', 'special', 'queen', 'exactli', 'style', 'mani', 'pick', 'add', 'gum', 'st', 'match', 'af', 'temporari', 'intens', 'enhanc', 'descript', 'mine', 'strobe', 'moonlight', 'deserv', 'glaze', 'highlit', 'consist', 'photo', 'golden', 'flawless', 'goddess', 'addit', 'caus', 'mild', 'glowi', 'world', 'god', 'genuin', 'diva', 'cheek', 'stunner', 'galaxi', 'strike', 'descent', 'dewi', 'top', 'particl', 'longer', 'pic', 'powder', 'among', 'croc', 'nimbu', 'pani', 'rawr', 'masaba', 'pataka', 'femm', 'fatal', 'five', 'coolest', 'paani', 'kale', 'ing', 'softli', 'await', 'buzz', 'kill', 'rock', 'duo', 'anoth', 'shown', 'plum', 'orang', 'oct', 'palm', 'mlbb', 'wild', 'glide', 'butter', 'butteri', 'hit', 'velvet', 'hot', 'velveti', 'beat', 'nc', 'toffe', 'reddish', 'exact', 'finest', 'key', 'lighter', 'besttt', 'play', 'beig', 'naughti', 'wine', 'beachi', 'mull', 'cinnamon', 'crunch', 'minimum', 'spice', 'cabernet', 'deviou', 'caramel', 'margharita', 'regal', 'rubi', 'taup', 'thrill', 'dirti', 'rusti', 'bon', 'rupe', 'sugar', 'maroon', 'offic', 'wooow', 'p', 'prefer', 'amount', 'carri', 'flatter', 'k', 'ultra', 'brow', 'eyebrow', 'mascara', 'siriu', 'neat', 'win', 'person', 'dens', 'defin', 'dupe', 'nyx', 'underr', 'gel', 'hold', 'instant', 'third', 'honey', 'primer', 'bristl', 'might', 'seem', 'precis', 'sinc', 'though', 'pro', 'flavour', 'serial', 'kisser', 'raspberri', 'lipbalm', 'grape', 'blueberri', 'pinacolada', 'pomegran', 'minut', 'strawberri', 'goood', 'yummi', 'soften', 'ittt', 'marvel', 'date', 'coco', 'bestt', 'absorb', 'regret', 'candi', 'bang', 'smoother', 'clutch', 'sooth', 'divin', 'stippl', 'hand', 'gr', 'stylish', 'contour', 'conquer', 'sizzl', 'chisel', 'dusti', 'palett', 'econom', 'piec', 'two', 'didnt', 'combin', 'smoothli', 'benefit', 'heart', 'lit', 'safe', 'wed', 'back', 'darker', 'ah', 'cranberri', 'scarlet', 'imag', 'brand', 'everrr', 'neutral', 'screen', 'melt', 'fragil', 'mesmer', 'yellow', 'cast', 'mac', 'fawn', 'geniu', 'classic', 'across', 'creme', 'alreadi', 'slightli', 'limit', 'spf', 'skingeniu', 'still', 'wateri', 'whitish', 'pale', 'humid', 'climat', 'weird', 'durabl', 'overhyp', 'bag', 'wrong', 'sea', 'hell', 'chic', 'emerg', 'store', 'purs', 'cum', 'stormi', 'noir', 'glimmer', 'glam', 'bling', 'shop', 'violet', 'cosmet', 'twinkl', 'wish', 'multipurpos', 'trendi', 'silver', 'grey', 'seduct', 'lovin', 'steel', 'pinkast', 'pinktast', 'custom', 'catch', 'bronzer', 'pristin', 'white', 'maiden', 'edit', 'born', 'blingi', 'away', 'fallout', 'ravish', 'midnight', 'readi', 'season', 'versatil', 'bombshel', 'starri', 'sight', 'angel', 'put', 'poison', 'whimsic', 'potion', 'glamorey', 'chaotic', 'calypso', 'mystic', 'wood', 'emerald', 'dragon', 'rustic', 'enchant', 'forest', 'per', 'alo', 'creat', 'linear', 'dissapoint', 'app', 'coloss', 'die', 'miss', 'amazingggg', 'navi', 'lakm', 'year', 'smokey', 'toasti', 'almond', 'buff', 'hazelnut', 'india', 'pore', 'hai', 'terrif', 'minim', 'shaper', 'delight', 'odour', 'old', 'harsh', 'swan', 'nope', 'inconveni', 'smudgi', 'smudgeproof', 'silki', 'ivori', 'cosi', 'chestnut', 'correct', 'unsatisfi', 'broken', 'powderi', 'spong', 'complexion', 'softer', 'crayon', 'honeymoon', 'code', 'paintstix', 'berri', 'grung', 'roll', 'babe', 'break', 'danc', 'brick', 'popular', 'goal', 'bubblegum', 'tender', 'boss', 'invest', 'sweetheart', 'spirit', 'jasmin', 'delici', 'floral', 'scent', 'uptown', 'origin', 'overpow', 'aroma', 'pleasant', 'sensat', 'agarbatti', 'fragnanc', 'irrit', 'confus', 'lavend', 'plu', 'sun', 'sunscreen', 'nivea', 'trust', 'bodi', 'perform', 'ideal', 'spray', 'chemic', 'illumin', 'chunki', 'sunbeam', 'gleam', 'outstand', 'bring', 'babi', 'univers', 'came', 'sad', 'fill', 'gentl', 'filler', 'lust', 'vintag', 'cherri', 'sandstorm', 'sued', 'beach', 'spoken', 'kitten', 'heel', 'cooki', 'burgundi', 'romanc', 'foil', 'amethyst', 'drugstor', 'pout', 'fever', 'puff', 'teenag', 'intent', 'squad', 'moodi', 'group', 'puppi', 'quiz', 'bud', 'dreami', 'satisfact', 'moist', 'bliss', 'pallet', 'rust', 'whip', 'caviar', 'copenhagen', 'liplin', 'pencil', 'milan', 'mislead', 'swear', 'brittl', 'york', 'dust', 'amazingg', 'done', 'ahead', 'pallett', 'tattoo', 'studio', 'teal', 'smoki', 'chalki', 'sharpen', 'itchi', 'delic', 'seen', 'palatt', 'muse', 'condit', 'talker', 'rosewood', 'fearless', 'thriller', 'freshli', 'blood', 'onyx', 'audaci', 'transluc', 'mayhem', 'luster', 'lustr', 'icon', 'pastel', 'spark', 'quartz', 'spiral', 'lava', 'molten', 'silk', 'th', 'easiest', 'press', 'multitask', 'sand', 'master', 'apt', 'impact', 'pearl', 'dew', 'healthi', 'waoo', 'com', 'kohl', 'organ', 'blackest', 'exot', 'jade', 'mint', 'ingredi', 'woow', 'blusher', 'matcha', 'spearmint', 'lagoon', 'gelato', 'limoncello', 'floss', 'blackcurr', 'mandarino', 'whole', 'latt', 'mm', 'om', 'rm', 'bm', 'enrich', 'pm', 'wm', 'fuchsia', 'r', 'herbal', 'mocha', 'cr', 'serum', 'argan', 'argon', 'bed', 'runway', 'spring', 'fizz', 'ice', 'awsum', 'desert', 'sunkiss', 'la', 'mute', 'tt', 'retro', 'rush', 'bubbl', 'mention', 'loreal', 'infinit', 'pralin', 'pari', 'guava', 'gush', 'oreal', 'cheri', 'infal', 'crush', 'lengthen', 'superlin', 'lacquer', 'rambl', 'frapp', 'bordeaux', 'everlast', 'resili', 'raisin', 'unend', 'persist', 'cat', 'treat', 'doubt', 'fight', 'home', 'blond', 'salon', 'root', 'end', 'soon', 'retouch', 'left', 'waw', 'fixer', 'extend', 'frost', 'kay', 'sunlit', 'kat', 'mill', 'blur', 'bake', 'flashback', 'banana', 'oliv', 'katrina', 'ba', 'canva', 'bespok', 'indigo', 'haut', 'supper', 'curl', 'maskara', 'focu', 'straight', 'search', 'bittersweet', 'whiplash', 'rosa', 'seafront', 'nutti', 'rocki', 'road', 'smitten', 'flamingo', 'rhythm', 'firecrack', 'bitter', 'navig', 'temptat', 'fortun', 'spade', 'fame', 'action', 'unleash', 'applaus', 'hypnot', 'climax', 'countdown', 'gossip', 'rom', 'papp', 'ed', 'playback', 'fratern', 'fashionista', 'wee', 'rumour', 'pap', 'entourag', 'chartbust', 'flirti', 'ytan', 'award', 'bloom', 'self', 'head', 'tickl', 'salmon', 'cameo', 'suspens', 'snapshot', 'backstag', 'dialogu', 'wrap', 'debut', 'superhit', 'carpet', 'rehears', 'turner', 'renew', 'sulphat', 'curli', 'bio', 'repair', 'morocco', 'manag', 'frizz', 'wavi', 'fizzi', 'smoothen', 'cocoa', 'strength', 'milk', 'coconut', 'sulfat', 'eucalyptu']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import LSTM, Dense, Dropout\n",
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np\n",
        "\n",
        "X = np.random.rand(1000, 4383)\n",
        "y = np.random.randint(2, size=(1000, 1))\n",
        "\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n",
        "X_val = np.reshape(X_val, (X_val.shape[0], X_val.shape[1], 1))\n",
        "\n",
        "model = Sequential()\n",
        "model.add(LSTM(64, input_shape=(X_train.shape[1], 1)))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(16, activation='relu'))\n",
        "model.add(Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "history = model.fit(np.expand_dims(X_train, axis=-1), y_train, batch_size=32, epochs=40, validation_data=(np.expand_dims(X_val, axis=-1), y_val))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ThRiR453Kuns",
        "outputId": "3fa17b00-0254-4adc-c7ef-969b412ca681"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n",
            "25/25 [==============================] - 37s 1s/step - loss: 0.6936 - accuracy: 0.5013 - val_loss: 0.6923 - val_accuracy: 0.5300\n",
            "Epoch 2/40\n",
            "25/25 [==============================] - 36s 1s/step - loss: 0.6957 - accuracy: 0.4938 - val_loss: 0.6924 - val_accuracy: 0.5300\n",
            "Epoch 3/40\n",
            "25/25 [==============================] - 36s 1s/step - loss: 0.6957 - accuracy: 0.4762 - val_loss: 0.6916 - val_accuracy: 0.5300\n",
            "Epoch 4/40\n",
            "25/25 [==============================] - 36s 1s/step - loss: 0.6926 - accuracy: 0.5125 - val_loss: 0.6916 - val_accuracy: 0.5300\n",
            "Epoch 5/40\n",
            "25/25 [==============================] - 36s 1s/step - loss: 0.6924 - accuracy: 0.5175 - val_loss: 0.6917 - val_accuracy: 0.5300\n",
            "Epoch 6/40\n",
            "25/25 [==============================] - 36s 1s/step - loss: 0.6930 - accuracy: 0.5263 - val_loss: 0.6917 - val_accuracy: 0.5300\n",
            "Epoch 7/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6959 - accuracy: 0.4663 - val_loss: 0.6921 - val_accuracy: 0.5500\n",
            "Epoch 8/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6931 - accuracy: 0.5038 - val_loss: 0.6917 - val_accuracy: 0.5300\n",
            "Epoch 9/40\n",
            "25/25 [==============================] - 34s 1s/step - loss: 0.6932 - accuracy: 0.4988 - val_loss: 0.6921 - val_accuracy: 0.5350\n",
            "Epoch 10/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6922 - accuracy: 0.5038 - val_loss: 0.6924 - val_accuracy: 0.5350\n",
            "Epoch 11/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6938 - accuracy: 0.4938 - val_loss: 0.6917 - val_accuracy: 0.5300\n",
            "Epoch 12/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6927 - accuracy: 0.5113 - val_loss: 0.6916 - val_accuracy: 0.5300\n",
            "Epoch 13/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6946 - accuracy: 0.4875 - val_loss: 0.6922 - val_accuracy: 0.5450\n",
            "Epoch 14/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6952 - accuracy: 0.4787 - val_loss: 0.6917 - val_accuracy: 0.5300\n",
            "Epoch 15/40\n",
            "25/25 [==============================] - 36s 1s/step - loss: 0.6929 - accuracy: 0.4975 - val_loss: 0.6920 - val_accuracy: 0.5300\n",
            "Epoch 16/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6931 - accuracy: 0.5000 - val_loss: 0.6922 - val_accuracy: 0.5300\n",
            "Epoch 17/40\n",
            "25/25 [==============================] - 36s 1s/step - loss: 0.6922 - accuracy: 0.5213 - val_loss: 0.6922 - val_accuracy: 0.5300\n",
            "Epoch 18/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6920 - accuracy: 0.5100 - val_loss: 0.6916 - val_accuracy: 0.5300\n",
            "Epoch 19/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6941 - accuracy: 0.4650 - val_loss: 0.6919 - val_accuracy: 0.5300\n",
            "Epoch 20/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6928 - accuracy: 0.5088 - val_loss: 0.6924 - val_accuracy: 0.5450\n",
            "Epoch 21/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6930 - accuracy: 0.4913 - val_loss: 0.6917 - val_accuracy: 0.5300\n",
            "Epoch 22/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6950 - accuracy: 0.4925 - val_loss: 0.6928 - val_accuracy: 0.5050\n",
            "Epoch 23/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6930 - accuracy: 0.4988 - val_loss: 0.6918 - val_accuracy: 0.5300\n",
            "Epoch 24/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6945 - accuracy: 0.4963 - val_loss: 0.6923 - val_accuracy: 0.5300\n",
            "Epoch 25/40\n",
            "25/25 [==============================] - 32s 1s/step - loss: 0.6927 - accuracy: 0.5050 - val_loss: 0.6919 - val_accuracy: 0.5300\n",
            "Epoch 26/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6931 - accuracy: 0.5050 - val_loss: 0.6925 - val_accuracy: 0.5450\n",
            "Epoch 27/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6920 - accuracy: 0.5113 - val_loss: 0.6924 - val_accuracy: 0.5300\n",
            "Epoch 28/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6927 - accuracy: 0.5113 - val_loss: 0.6920 - val_accuracy: 0.5300\n",
            "Epoch 29/40\n",
            "25/25 [==============================] - 36s 1s/step - loss: 0.6938 - accuracy: 0.5063 - val_loss: 0.6920 - val_accuracy: 0.5300\n",
            "Epoch 30/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6931 - accuracy: 0.4988 - val_loss: 0.6924 - val_accuracy: 0.5300\n",
            "Epoch 31/40\n",
            "25/25 [==============================] - 32s 1s/step - loss: 0.6926 - accuracy: 0.5138 - val_loss: 0.6919 - val_accuracy: 0.5300\n",
            "Epoch 32/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6926 - accuracy: 0.5075 - val_loss: 0.6919 - val_accuracy: 0.5300\n",
            "Epoch 33/40\n",
            "25/25 [==============================] - 33s 1s/step - loss: 0.6931 - accuracy: 0.5088 - val_loss: 0.6922 - val_accuracy: 0.5300\n",
            "Epoch 34/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6932 - accuracy: 0.5088 - val_loss: 0.6923 - val_accuracy: 0.5300\n",
            "Epoch 35/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6938 - accuracy: 0.4963 - val_loss: 0.6931 - val_accuracy: 0.4850\n",
            "Epoch 36/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6929 - accuracy: 0.5225 - val_loss: 0.6925 - val_accuracy: 0.5250\n",
            "Epoch 37/40\n",
            "25/25 [==============================] - 35s 1s/step - loss: 0.6928 - accuracy: 0.5163 - val_loss: 0.6924 - val_accuracy: 0.5300\n",
            "Epoch 38/40\n",
            "25/25 [==============================] - 32s 1s/step - loss: 0.6920 - accuracy: 0.5300 - val_loss: 0.6920 - val_accuracy: 0.5300\n",
            "Epoch 39/40\n",
            "25/25 [==============================] - 32s 1s/step - loss: 0.6937 - accuracy: 0.4950 - val_loss: 0.6925 - val_accuracy: 0.5450\n",
            "Epoch 40/40\n",
            "25/25 [==============================] - 32s 1s/step - loss: 0.6920 - accuracy: 0.5213 - val_loss: 0.6933 - val_accuracy: 0.5000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "train_loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(1, len(train_loss) + 1)\n",
        "\n",
        "plt.plot(epochs, train_loss, 'b-', label='Training Loss')\n",
        "plt.plot(epochs, val_loss, 'r-', label='Validation Loss')\n",
        "\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "4nrTNpHtOyiw",
        "outputId": "8ec434f2-3ad6-471f-e4be-a7a5e24850fb"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "E6_PYOkI6jNp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vectorizer_path = '/content/data/count - Vectorizer.pkl'\n",
        "model_path = '/content/data/costemtics_reviews_classification.pkl'\n"
      ],
      "metadata": {
        "id": "gYlBMkDsPyAb"
      },
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pickle.dump(cv, open(\"count - Vectorizer.pkl\", \"wb\"))\n",
        "pickle.dump(model, open(\"costemtics_reviews_classification.pkl\", \"wb\"))"
      ],
      "metadata": {
        "id": "kpqNQ-QTpAw3"
      },
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "save_cv = pickle.load(open(\"count - Vectorizer.pkl\", 'rb'))\n",
        "model_ = pickle.load (open('costemtics_reviews_classification.pkl', 'rb'))"
      ],
      "metadata": {
        "id": "bw-mRz_mpHb3"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test_model(senetence):\n",
        "  sen = save_cv.transform([senetence]).toarray()\n",
        "  res = model_.predict(sen)[0]\n",
        "  if res == 1:\n",
        "    return 'postitive review'\n",
        "  else:\n",
        "    return 'negative review'"
      ],
      "metadata": {
        "id": "BFITidpHpMrf"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sen = 'Very worst'\n",
        "res = test_model(sen)\n",
        "print(res)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aj0Q8kTwpPiC",
        "outputId": "d2b5ca72-83cb-402b-83e6-a3a8505c5c90"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 486ms/step\n",
            "negative review\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "OLoNruf5Ylgd"
      }
    }
  ]
}